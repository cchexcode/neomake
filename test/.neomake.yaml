version: "0.5"

env:
  capture: "^(PWD)$"
  vars:
    ENV_GLOBAL: "val_global"

nodes:
  count:
    matrix:
      dense:
        drop: "^(0,0,0|1,1,1)$"
        dimensions:
          - - env:
                X: "0"
            - env:
                X: "1"
          - - env:
                Y: "0"
            - env:
                Y: "1"
          - - env:
                Z: "0"
            - env:
                Z: "1"
    tasks:
      - shell:
          program: "python3"
          args:
            - "-c"
        script: |
          import time
          import os
          import random

          cnt = 0
          while True:
            print(f'{os.environ.get("X")}{os.environ.get("Y")}{os.environ.get("Z")}: {cnt}', flush=True)
            cnt+=1
            time.sleep(random.random())

  print:
    matrix:
      dense:
        dimensions:
          - - env:
                X: "0"
            - env:
                X: "1"
          - - env:
                Y: "0"
            - env:
                Y: "1"
    tasks:
      - script: |
          printf $X-$Y

  alpha: # minimal example
    tasks:
      - script: |
          set -e
          printf "alpha"

  bravo: # with predecessor
    pre:
      - alpha
    tasks:
      - script: |
          set -e
          printf "bravo"

  charlie: # environment variables
    env:
      ENV_NODE: val_node
    matrix:
      dense:
        dimensions:
          - - env:
                ENV_MATRIX: "val_matrix"
    tasks:
      - env:
          ENV_TASK: val_task
        script: |
          set -e
          printf "$ENV_GLOBAL\n"
          printf "$ENV_NODE\n"
          printf "$ENV_MATRIX\n"
          printf "$ENV_TASK\n"

  delta: # matrix
    matrix:
      dense:
        dimensions:
          - - env:
                X: "0"
            - env:
                X: "1"
          - - env:
                Y: "0"
            - env:
                Y: "1"
    tasks:
      - script: |
          set -e
          printf "$X$Y\n"

  echo: # workdir
    workdir: "./res"
    tasks:
      - script: |
          set -e
          ls -al1 .
      - workdir: ./test
        script: |
          set -e
          ls -al1 .

  foxtrot: # shell
    shell:
      program: "/bin/bash"
      args:
        - "-c"
    tasks:
      - script: |
          set -e
          printf "$0"
      - shell:
          program: "/bin/sh"
          args:
            - "-c"
        script: |
          set -e
          printf "$0"

  golf:
    tasks:
      - script: |
          set -e
          exit 1

watch:
  all:
    filter: '^(modified\/data\/content)\|.+(\.rs)$'
    exec:
      node:
        ref: charlie
