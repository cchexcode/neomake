version: "0.6"

env:
  capture: "^(CAPTURE)$"
  vars:
    DEFAULT_ENV_VAR: default var
    OVERRIDE_ENV_VAR_0: old e0
    OVERRIDE_ENV_VAR_1: old e1

.anchor: &anchor |
  printf "test anchor"

nodes:
  python:
    description: This is an example of using multiple execution environments (shell and python).
    shell: "/bin/bash -c"
    matrix:
      parallel: false
      dimensions:
        - - env:
              vars:
                PRINT_VAL: value 0
          - env:
              vars:
                PRINT_VAL: value 1
    tasks:
      - shell: "python3 -c"
        script: print('yada')
      - script: printf "$PRINT_VAL"
      - script: *anchor

  a:
    matrix:
      parallel: true
      dimensions:
        - - env:
              vars:
                VA: A0
          - env:
              vars:
                VA: A1
        - - env:
              vars:
                VB: B0
          - env:
              vars:
                VB: B1
          - env:
              vars:
                VB: B2
        - - env:
              vars:
                VC: C0
          - env:
              vars:
                VC: C1
    tasks:
      - script: echo "$VA $VB $VC"
  b:
    pre:
      - name: a
    tasks:
      - script: echo "b"
  c:
    matrix:
      parallel: true
      dimensions:
        - - env:
              vars:
                VA: A0
          - env:
              vars:
                VA: A1
        - - env:
              vars:
                VB: B0
          - env:
              vars:
                VB: B1
    pre:
      - name: b
    tasks:
      - script: |
          echo "$VA $VB"

  minimal:
    tasks:
      - script: echo "minimal"

  error:
    tasks:
      - script: exit 1

  graph:
    pre:
      - name: minimal
      - name: a
      - name: b
    tasks: []

  test:
    matrix:
      parallel: false
      dimensions:
        - - env:
              vars:
                OVERRIDE_ENV_VAR_0: new e0
    tasks:
      - env:
          vars:
            OVERRIDE_ENV_VAR_1: new e1
        script: |
          set -e

          echo "$DEFAULT_ENV_VAR"
          sleep 1
          echo "$OVERRIDE_ENV_VAR_0"
          sleep 1
          echo "$OVERRIDE_ENV_VAR_1"
          sleep 1
          echo "A"
          sleep 1
          echo "B"
          sleep 1
          echo "C"
          sleep 1
          echo "D"
          sleep 1
          echo "{{ args.test }}" # this will require an argument to be passed via '-a args.test="some-argument"'
          sleep 1
          unknown-command
          echo "too far!"
