name: release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "version"
        required: true

jobs:
  version:
    name: version
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.export.outputs.version }}
    steps:
      - id: export
        run: 'printf "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT'
      - id: release
        name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: ${{ github.event.inputs.version }}
          removeArtifacts: true
          makeLatest: true
      - id: releaseExp
        run: 'printf "upload_url=${{ steps.release.outputs.upload_url }}" >> $GITHUB_OUTPUT'

  # crates-io:
  #   name: "crates.io"
  #   if: github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - version
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: install rust
  #       run: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
  #     - name: publish
  #       run: |
  #         cd code/app/cli
  #         cargo login ${{ secrets.CRATES_IO_LOGIN_TOKEN }}
  #         sed 's/version = "0.0.0"/version = "'${{ needs.version.outputs.version }}'"/g' Cargo.toml > Cargo.toml.tmp
  #         mv Cargo.toml.tmp Cargo.toml
  #         cargo publish --allow-dirty

  deb:
    name: "deb"
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      - version
      # - crates-io
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get install -y curl
      - name: install rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          cargo install cargo-deb
      - name: publish
        run: |
          cd code/app/cli
          sed 's/version = "0.0.0"/version = "'${{ needs.version.outputs.version }}'"/g' Cargo.toml > Cargo.toml.tmp
          mv Cargo.toml.tmp Cargo.toml
          cargo deb
          ll -algh ./target/debian
          curl -XPOST --data-binary "@target/debian/neomake_${{ needs.version.outputs.version }}_ARCHARCH.deb" ${{ needs.version.outputs.upload_url }}
